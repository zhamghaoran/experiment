// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package service

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *AddReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddReq[number], err)
}

func (x *AddReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Tel, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *AddReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Add, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *All) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_All[number], err)
}

func (x *All) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v AddReq
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.AddReqs = append(x.AddReqs, &v)
	return offset, nil
}

func (x *Res) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Res[number], err)
}

func (x *Res) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *AddReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *AddReq) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *AddReq) fastWriteField2(buf []byte) (offset int) {
	if x.Tel == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTel())
	return offset
}

func (x *AddReq) fastWriteField3(buf []byte) (offset int) {
	if x.Add == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetAdd())
	return offset
}

func (x *AddReq) fastWriteField4(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetId())
	return offset
}

func (x *All) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *All) fastWriteField1(buf []byte) (offset int) {
	if x.AddReqs == nil {
		return offset
	}
	for i := range x.GetAddReqs() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetAddReqs()[i])
	}
	return offset
}

func (x *Res) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *Res) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *AddReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *AddReq) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *AddReq) sizeField2() (n int) {
	if x.Tel == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTel())
	return n
}

func (x *AddReq) sizeField3() (n int) {
	if x.Add == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetAdd())
	return n
}

func (x *AddReq) sizeField4() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetId())
	return n
}

func (x *All) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *All) sizeField1() (n int) {
	if x.AddReqs == nil {
		return n
	}
	for i := range x.GetAddReqs() {
		n += fastpb.SizeMessage(1, x.GetAddReqs()[i])
	}
	return n
}

func (x *Res) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *Res) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetCode())
	return n
}

var fieldIDToName_AddReq = map[int32]string{
	1: "Name",
	2: "Tel",
	3: "Add",
	4: "Id",
}

var fieldIDToName_All = map[int32]string{
	1: "AddReqs",
}

var fieldIDToName_Res = map[int32]string{
	1: "Code",
}
