// Code generated by Kitex v0.7.3. DO NOT EDIT.

package address

import (
	"context"
	service "experiment/3_cs/server/kitex_gen/kitex_gen/service"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return addressServiceInfo
}

var addressServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Address"
	handlerType := (*service.Address)(nil)
	methods := map[string]kitex.MethodInfo{
		"Add":    kitex.NewMethodInfo(addHandler, newAddArgs, newAddResult, false),
		"Modify": kitex.NewMethodInfo(modifyHandler, newModifyArgs, newModifyResult, false),
		"Delete": kitex.NewMethodInfo(deleteHandler, newDeleteArgs, newDeleteResult, false),
		"Select": kitex.NewMethodInfo(selectHandler, newSelectArgs, newSelectResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "",
		"ServiceFilePath": ``,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.7.3",
		Extra:           extra,
	}
	return svcInfo
}

func addHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(service.AddReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(service.Address).Add(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddArgs:
		success, err := handler.(service.Address).Add(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddResult)
		realResult.Success = success
	}
	return nil
}
func newAddArgs() interface{} {
	return &AddArgs{}
}

func newAddResult() interface{} {
	return &AddResult{}
}

type AddArgs struct {
	Req *service.AddReq
}

func (p *AddArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(service.AddReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AddArgs) Unmarshal(in []byte) error {
	msg := new(service.AddReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddArgs_Req_DEFAULT *service.AddReq

func (p *AddArgs) GetReq() *service.AddReq {
	if !p.IsSetReq() {
		return AddArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddResult struct {
	Success *service.Res
}

var AddResult_Success_DEFAULT *service.Res

func (p *AddResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(service.Res)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AddResult) Unmarshal(in []byte) error {
	msg := new(service.Res)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddResult) GetSuccess() *service.Res {
	if !p.IsSetSuccess() {
		return AddResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddResult) SetSuccess(x interface{}) {
	p.Success = x.(*service.Res)
}

func (p *AddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddResult) GetResult() interface{} {
	return p.Success
}

func modifyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(service.AddReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(service.Address).Modify(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ModifyArgs:
		success, err := handler.(service.Address).Modify(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ModifyResult)
		realResult.Success = success
	}
	return nil
}
func newModifyArgs() interface{} {
	return &ModifyArgs{}
}

func newModifyResult() interface{} {
	return &ModifyResult{}
}

type ModifyArgs struct {
	Req *service.AddReq
}

func (p *ModifyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(service.AddReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ModifyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ModifyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ModifyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ModifyArgs) Unmarshal(in []byte) error {
	msg := new(service.AddReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ModifyArgs_Req_DEFAULT *service.AddReq

func (p *ModifyArgs) GetReq() *service.AddReq {
	if !p.IsSetReq() {
		return ModifyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ModifyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ModifyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ModifyResult struct {
	Success *service.Res
}

var ModifyResult_Success_DEFAULT *service.Res

func (p *ModifyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(service.Res)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ModifyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ModifyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ModifyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ModifyResult) Unmarshal(in []byte) error {
	msg := new(service.Res)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ModifyResult) GetSuccess() *service.Res {
	if !p.IsSetSuccess() {
		return ModifyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ModifyResult) SetSuccess(x interface{}) {
	p.Success = x.(*service.Res)
}

func (p *ModifyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ModifyResult) GetResult() interface{} {
	return p.Success
}

func deleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(service.AddReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(service.Address).Delete(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteArgs:
		success, err := handler.(service.Address).Delete(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteArgs() interface{} {
	return &DeleteArgs{}
}

func newDeleteResult() interface{} {
	return &DeleteResult{}
}

type DeleteArgs struct {
	Req *service.AddReq
}

func (p *DeleteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(service.AddReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteArgs) Unmarshal(in []byte) error {
	msg := new(service.AddReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteArgs_Req_DEFAULT *service.AddReq

func (p *DeleteArgs) GetReq() *service.AddReq {
	if !p.IsSetReq() {
		return DeleteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteResult struct {
	Success *service.Res
}

var DeleteResult_Success_DEFAULT *service.Res

func (p *DeleteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(service.Res)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteResult) Unmarshal(in []byte) error {
	msg := new(service.Res)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteResult) GetSuccess() *service.Res {
	if !p.IsSetSuccess() {
		return DeleteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteResult) SetSuccess(x interface{}) {
	p.Success = x.(*service.Res)
}

func (p *DeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteResult) GetResult() interface{} {
	return p.Success
}

func selectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(service.AddReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(service.Address).Select(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SelectArgs:
		success, err := handler.(service.Address).Select(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SelectResult)
		realResult.Success = success
	}
	return nil
}
func newSelectArgs() interface{} {
	return &SelectArgs{}
}

func newSelectResult() interface{} {
	return &SelectResult{}
}

type SelectArgs struct {
	Req *service.AddReq
}

func (p *SelectArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(service.AddReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SelectArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SelectArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SelectArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SelectArgs) Unmarshal(in []byte) error {
	msg := new(service.AddReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SelectArgs_Req_DEFAULT *service.AddReq

func (p *SelectArgs) GetReq() *service.AddReq {
	if !p.IsSetReq() {
		return SelectArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SelectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SelectArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SelectResult struct {
	Success *service.All
}

var SelectResult_Success_DEFAULT *service.All

func (p *SelectResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(service.All)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SelectResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SelectResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SelectResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SelectResult) Unmarshal(in []byte) error {
	msg := new(service.All)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SelectResult) GetSuccess() *service.All {
	if !p.IsSetSuccess() {
		return SelectResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SelectResult) SetSuccess(x interface{}) {
	p.Success = x.(*service.All)
}

func (p *SelectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SelectResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Add(ctx context.Context, Req *service.AddReq) (r *service.Res, err error) {
	var _args AddArgs
	_args.Req = Req
	var _result AddResult
	if err = p.c.Call(ctx, "Add", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Modify(ctx context.Context, Req *service.AddReq) (r *service.Res, err error) {
	var _args ModifyArgs
	_args.Req = Req
	var _result ModifyResult
	if err = p.c.Call(ctx, "Modify", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Delete(ctx context.Context, Req *service.AddReq) (r *service.Res, err error) {
	var _args DeleteArgs
	_args.Req = Req
	var _result DeleteResult
	if err = p.c.Call(ctx, "Delete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Select(ctx context.Context, Req *service.AddReq) (r *service.All, err error) {
	var _args SelectArgs
	_args.Req = Req
	var _result SelectResult
	if err = p.c.Call(ctx, "Select", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
